@page "/usuarios"
@rendermode InteractiveServer
@inject UsuarioBusiness UsuariosService
<h3>Usuarios</h3>

<div class="container">
  <div class="row">
    <div class="col-6">
      <a href="/usuarios/new">
        <button class="btn btn-success">
          Nuevo Usuario
        </button>
      </a>
    </div>
    <div class="col-6">
      <div class="input-group mb-3">
        <input type="text" class="form-control" placeholder="Buscar..." @bind="buscar"></input>
        <button type="button" class="btn btn-outline-secondary" @onclick="BuscarUsuario">Buscar</button>
      </div>
    </div>
  </div>
  <div class="row">
    <table class="table table-striped table-hover">
      <thead>
        <tr>
          <th>Id</th>
          <th>Nombre</th>
          <th>Apellido</th>
          <th>NombreUsuario</th>
          <th>Email</th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        @foreach (Usuario usuario in usuarios)
        {
          <tr>
            <td>@usuario.Id</td>
            <td>@usuario.Nombre</td>
            <td>@usuario.Apellido</td>
            <td>@usuario.NombreUsuario</td>
            <td>@usuario.Email</td>
            <td>
              <a href="/usuarios/@usuario.Id/Editar">Editar</a>
            </td>
            <td>
              <button @onclick="@(() => EliminarUsuario(usuario.Id))" class="btn btn-danger">
                Eliminar
              </button>
            </td>
          </tr>
        }
      </tbody>
    </table>
  </div>
</div>
@code {

  private List<Usuario> usuarios = new List<Usuario>();

  private string buscar = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        usuarios = await UsuariosService.GetUsuarios();
    }

    private async Task EliminarUsuario(int id)

    {
        await UsuariosService.DeleteUsuario(id);
        usuarios = await UsuariosService.GetUsuarios();
    }

    private async Task BuscarUsuario()

    {
        usuarios = await UsuariosService.GetUsuariosBy(buscar);
    }
}
